<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="D:\OneDrive\Posao\Infobip\SimpleMessages\SimpleMessages\bin\Debug\SimpleMessages.exe">
   <Modules>
    <Module Name="simplemessages.exe">
     <Messages>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2016-12-31 11:29:27Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'SimpleMessages.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="SimpleMessages.Service">
       <Types>
        <Type Name="ISecureMessages" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FindMessages(System.String,System.String,System.DateTime,System.DateTime,System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2016-12-31 11:29:27Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'ISecureMessages.FindMessages(string, string, DateTime, DateTime, string, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="To" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-12-31 11:29:27Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error">In virtual/interface member 'ISecureMessages.FindMessages(string, string, DateTime, DateTime, string, bool)', rename parameter 'to' so that it no longer conflicts with the reserved language keyword 'To'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateMessage(System.Guid,SimpleMessages.Models.Message)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="guid" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-12-31 11:29:27Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'ISecureMessages.UpdateMessage(Guid, Message)', consider replacing the data type identifier 'guid' in parameter name 'guid' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MessageService" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FindMessages(System.String,System.String,System.DateTime,System.DateTime,System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2016-12-31 11:29:27Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="D:\OneDrive\Posao\Infobip\SimpleMessages\SimpleMessages\Service" File="MessageService.cs" Line="311">Replace method 'MessageService.FindMessages(string, string, DateTime, DateTime, string, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="4#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-31 11:29:27Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="D:\OneDrive\Posao\Infobip\SimpleMessages\SimpleMessages\Service" File="MessageService.cs" Line="311">In member 'MessageService.FindMessages(string, string, DateTime, DateTime, string, bool)', change parameter name 'searchText' to 'token' in order to match the identifier as it has been declared in 'ISecureMessages.FindMessages(string, string, DateTime, DateTime, string, bool)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateModel`1(!!0,System.Net.HttpStatusCode&amp;,System.String&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-31 11:29:27Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="D:\OneDrive\Posao\Infobip\SimpleMessages\SimpleMessages\Service" File="MessageService.cs" Line="29">Modify 'MessageService.ValidateModel&lt;T&gt;(T, ref HttpStatusCode, ref string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
